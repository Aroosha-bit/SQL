CREATE TABLE orders
( order_id number(5),
 quantity number(4),
 cost_per_item number(6,2),
 total_cost number(8,2),
 create_date date,
 created_by varchar2(10)
);
-- Inserting three rows into the orders table
INSERT INTO orders (order_id, quantity, cost_per_item, total_cost, create_date, created_by)VALUES (1, 10, 5.99, 59.90, TO_DATE('2023-12-23', 'YYYY-MM-DD'), 'user1');
INSERT INTO orders (order_id, quantity, cost_per_item, total_cost, create_date, created_by)VALUES (2, 8, 8.75, 70.00, TO_DATE('2023-12-23', 'YYYY-MM-DD'), 'user2');
INSERT INTO orders (order_id, quantity, cost_per_item, total_cost, create_date, created_by)VALUES (3, 15, 3.50, 52.50, TO_DATE('2023-12-23', 'YYYY-MM-DD'), 'user3');
SELECT * FROM orders;
DROP TRIGGER orders_before_insert00;
CREATE OR REPLACE TRIGGER orders_before_insert00
BEFORE INSERT
 ON orders
 FOR EACH ROW
DECLARE
 v_username varchar2(10);
BEGIN
 -- Find username of person performing INSERT into table
 SELECT user INTO v_username
 FROM dual;
 -- Update create_date field to current system date
 :new.create_date := sysdate;
 -- Update created_by field to the username of the person performing the INSERT
 :new.created_by := v_username;
END;
DROP TRIGGER orders_before_insert00;
SELECT * FROM orders;

-- before update --
-- Create the 'product' table and 'product_price_history' table
CREATE TABLE product14 (
    product_id number(5),
    product_name varchar2(32),
    supplier_name varchar2(32),
    unit_price number(7,2)
);
-- Inserting three rows into the product14 table
INSERT INTO product14 (product_id, product_name, supplier_name, unit_price)VALUES (1, 'Product A', 'Supplier X', 20.99);
INSERT INTO product14 (product_id, product_name, supplier_name, unit_price)VALUES (2, 'Product B', 'Supplier Y', 30.50);
INSERT INTO product14 (product_id, product_name, supplier_name, unit_price)VALUES (3, 'Product C', 'Supplier Z', 15.75);
SELECT * FROM PRODUCT14;
CREATE TABLE product_price_history (
    product_id number(5),
    product_name varchar2(32),
    supplier_name varchar2(32),
    unit_price number(7,2)
);
--  Create the price_history_trigger and execute it. --
CREATE or REPLACE TRIGGER price_history_trigger0101 
BEFORE UPDATE OF unit_price 
ON product14 
FOR EACH ROW 
BEGIN 
    INSERT INTO product_price_history 
    VALUES (
        :old.product_id, 
        :old.product_name, 
        :old.supplier_name, 
        :old.unit_price
    ); 
END; 
-- Update the price of a product --
UPDATE PRODUCT14 
SET unit_price = 500 
WHERE product_id = 2;
SELECT * FROM PRODUCT14;


-- after insert --
-- Creating the products table
CREATE TABLE products
(
  product_id NUMBER(5) PRIMARY KEY,
  product_name VARCHAR2(50),
  price NUMBER(8,2)
);

-- Creating the products_history table for auditing
CREATE TABLE products_history
(
  history_id NUMBER(10) GENERATED BY DEFAULT ON NULL AS IDENTITY,
  product_id NUMBER(5),
  old_product_name VARCHAR2(50),
  old_price NUMBER(8,2),
  change_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Creating the AFTER INSERT trigger
CREATE OR REPLACE TRIGGER products_after_update
AFTER INSERT ON products
FOR EACH ROW
DECLARE
  v_old_product_name VARCHAR2(50);
  v_old_price NUMBER(8,2);
BEGIN
  -- Capture old values before the update
  IF UPDATING THEN
    SELECT product_name, price
    INTO v_old_product_name, v_old_price
    FROM products
    WHERE product_id = :old.product_id;
  END IF;

  -- Insert old values into history table
  INSERT INTO products_history
  (product_id, old_product_name,old_price )
  VALUES
  (
    :new.product_id,
    v_old_product_name,
    v_old_price
  );
END;

-- before insert --
-- Creating the products table
CREATE TABLE products
(
  product_id NUMBER(5) PRIMARY KEY,
  product_name VARCHAR2(50),
  price NUMBER(8,2)
);

-- Creating the products_before_insert trigger
CREATE OR REPLACE TRIGGER products_before_insert
BEFORE INSERT ON products
FOR EACH ROW
BEGIN
  -- Example: Ensure the price is not negative before insertion
  IF :new.price < 0 THEN
    RAISE_APPLICATION_ERROR(-20001, 'Price cannot be negative');
  END IF;

  -- Example: You can include any other checks or modifications as needed
END;
